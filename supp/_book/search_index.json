[["index.html", "Supplementary materials for manuscript: Perdiz arrow points from Caddo burial contexts aid in defining discrete behavioral regions Preface 0.1 Basis of inquiry 0.2 Primary findings 0.3 Acknowledgments 0.4 Funding 0.5 Data management 0.6 Colophon", " Supplementary materials for manuscript: Perdiz arrow points from Caddo burial contexts aid in defining discrete behavioral regions Robert Z. Selden, Jr.Â and John E. Dockall 2021-09-23 Preface Reproducibilitythe ability to recompute resultsand replicabilitythe chances other experimenters will achieve a consistent resultare two foundational characteristics of successful scientific research (Leek and Peng 2015). 0.1 Basis of inquiry Recent research in the ancestral Caddo area yielded evidence for distinct behavioral regions, across which material culture from Caddo burialsbottles and Gahagan bifaceshas been found to express significant morphological differences. This inquiry assesses whether Perdiz arrow points from Caddo burials, assumed to reflect design intent, may differ across the same geography, and extend the pattern of shape differences to a third category of Caddo material culture. Perdiz arrow points collected from the geographies of the northern and southern Caddo behavioral regions defined in a neoteric social network analysis were employed to test the hypothesis that morphological attributes differ, and are predictable, between the two communities. Results indicate significant between-community differences in maximum length, width, stem length, and stem width, but not thickness. Using the same traditional metrics combined with the tools of machine learning, a predictive modelsupport vector machinewas designed to assess the degree to which community differences could be predicted, achieving a receiver operator curve score of 97 percent, and an accuracy score of 94 percent. The subsequent geometric morphometric analysis identified significant differences in Perdiz arrow point shape, size, and allometry, coupled with significant results for modularity and morphological integration. These findings bolster recent arguments that established two discrete behavioral regions in the ancestral Caddo area defined on the basis of discernible morphological differences across three categories of Caddo material culture. 0.2 Primary findings 0.2.1 Linear morphometrics Maximum length differs significantly by Caddo community Maximum width differs significantly by Caddo community Maximum thickness does not differ by Caddo community Maximum stem width differs significantly by Caddo community Maximum stem length differs significantly by Caddo community 0.2.2 Machine learning Model achieved a cross validation score of 86 percent Model achieved a receiver operator curve score of 97 percent Model achieved an accuracy score of 94 percent 0.2.3 Geometric morphometrics Perdiz arrow point shape differ significantly by Caddo community Perdiz arrow point size differs significantly by Caddo community Perdiz arrow points exhibit significant modularity Perdiz arrow points exhibit significant blade/base morphological integration 0.3 Acknowledgments We express our gratitude to the Caddo Nation of Oklahoma and the Anthropology and Archaeology Laboratory at Stephen F. Austin State University for the requisite permissions and access to the NAGPRA items from the Washington Square Mound site and Turner collection, and to Tom A. Middlebrook for brokering access to the Perdiz arrow points from Caddo burials at the Morse Mound site. Thanks also to David K. Thulman, Christian S. Hoggard, Dean C. Adams, Michael L. Collyer, Emma Sherratt, Lauren Butaric, and Kersten Bergstrom for their constructive criticisms, comments, and suggestions throughout the development of this research program, and to the editors and anonymous reviewers for their comments and constructive criticisms, which further improved the manuscript and supplementary materials. 0.4 Funding Components of the analytical workflow were developed and funded by a Preservation Technology and Training grant (P14AP00138) to RZS from the National Center for Preservation Technology and Training, as well as grants to RZS from the Caddo Nation of Oklahoma, National Forests and Grasslands in Texas (15-PA-11081300-033) and the United States Forest Service (20-PA-11081300-074). 0.5 Data management This volume is written using Markdown, and includes all analysis code employed in the study, providing a means for others to reproduce (exactly) those results discussed and expounded upon in the following chapters. The replicable nature of this undertaking provides a means for others to critically assess and evaluate the various analytical components of this study (Gray and Marwick 2019; Peng 2011; Gandrud 2014), which is a necessary requirement for the production of reliable knowledge. Reproducibility projects in psychology and cancer biology are impacting current research practices across all domains. Examples of reproducible research are becoming more abundant in archaeology (Marwick 2016; Ivanovait et al. 2020; Selden Jr., Dockall, and Dubied 2020), and the next generation of archaeologists are learning those tools and methods needed to reproduce and/or replicate research results (Marwick et al. 2019). Reproducible and replicable research work flows are often employed at the highest levels of humanities-based inquiries to mitigate concern or doubt regarding proper execution, and is of particular import should the results haveexplicitly or implicitlya major impact on scientific progress (Peels and Bouter 2018). Components of the undertaking presented in this volume are novel, and this basic research endeavour is rooted in archaeological epistemology. Sharing data is not enough, and if investigators share only data absent their analysis code, that places a substantive burden on those who may seek to build upon or replicate their work in the future. In this instance, the choice to pursue a replicable work flow occurs based on the simple fact that this work is foundational, and meant to begin a meaningful discussion related to projectile morphology. The data and analysis code associated with this project can be accessed through this document or the GitHub repository, and is digitally curated on the Open Science Framework (DOI 10.17605/OSF.IO/VZHJR). 0.6 Colophon This version of the analysis was generated on 2021-09-23 03:26:43 using the following computational environment and dependencies: # what R packages and versions were used? if (&quot;devtools&quot; %in% installed.packages()) devtools::session_info() ## - Session info ----------------------------------------------------------------------------------------------- ## setting value ## version R version 4.1.1 (2021-08-10) ## os Windows 10 x64 ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate English_United Kingdom.1252 ## ctype English_United Kingdom.1252 ## tz America/Chicago ## date 2021-09-23 ## ## - Packages --------------------------------------------------------------------------------------------------- ## package * version date lib source ## bookdown 0.24 2021-09-02 [1] CRAN (R 4.1.1) ## bslib 0.3.0 2021-09-02 [1] CRAN (R 4.1.1) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.1) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## cli 3.0.1 2021-07-17 [1] CRAN (R 4.1.0) ## crayon 1.4.1 2021-02-08 [1] CRAN (R 4.1.0) ## desc 1.3.0 2021-03-05 [1] CRAN (R 4.1.0) ## devtools 2.4.2 2021-06-07 [1] CRAN (R 4.1.0) ## digest 0.6.27 2020-10-24 [1] CRAN (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.1.0) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.1.0) ## htmltools 0.5.2 2021-08-25 [1] CRAN (R 4.1.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.7.2 2020-12-09 [1] CRAN (R 4.1.0) ## knitr 1.34 2021-09-09 [1] CRAN (R 4.1.1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.1.0) ## magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.1.0) ## memoise 2.0.0 2021-01-26 [1] CRAN (R 4.1.0) ## pkgbuild 1.2.0 2020-12-15 [1] CRAN (R 4.1.0) ## pkgload 1.2.2 2021-09-11 [1] CRAN (R 4.1.1) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.1) ## remotes 2.4.0 2021-06-02 [1] CRAN (R 4.1.0) ## rlang 0.4.11 2021-04-30 [1] CRAN (R 4.1.0) ## rmarkdown 2.11 2021-09-14 [1] CRAN (R 4.1.1) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.1.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.1.0) ## stringi 1.7.4 2021-08-25 [1] CRAN (R 4.1.1) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.1.0) ## testthat 3.0.4 2021-07-01 [1] CRAN (R 4.1.0) ## usethis 2.0.1 2021-02-10 [1] CRAN (R 4.1.0) ## withr 2.4.2 2021-04-18 [1] CRAN (R 4.1.0) ## xfun 0.26 2021-09-14 [1] CRAN (R 4.1.1) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.1.0) ## ## [1] C:/Users/seldenjrz/Documents/R/win-library/4.1 ## [2] C:/Program Files/R/R-4.1.1/library Current Git commit details are: # where can I find this commit? if (&quot;git2r&quot; %in% installed.packages() &amp; git2r::in_repository(path = &quot;.&quot;)) git2r::repository(here::here()) ## Local: main D:/github/perdiz3 ## Remote: main @ origin (https://github.com/seldenlab/perdiz3) ## Head: [ee5069b] 2021-09-22: &lt;edit ms&gt; References "],["linear-morphometrics-1.html", "Chapter 1 Linear morphometrics 1.1 Read data and define variables 1.2 Boxplots for variable by raw material 1.3 Principal Components Analysis 1.4 Analyses of Variance (ANOVA) for variable ~ region", " Chapter 1 Linear morphometrics # install required analysis packages #devtools::install_github(&quot;tidyverse/tidyverse&quot;) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) #devtools::install_github(&quot;kassambara/ggpubr&quot;) #devtools::install_github(&quot;sinhrks/ggfortify&quot;) #devtools::install_github(&quot;daattali/ggExtra&quot;) # load libraries library(here) ## here() starts at D:/github/perdiz3/supp library(tidyverse) ## -- Attaching packages ----------------------------------------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.4 v dplyr 1.0.7 ## v tidyr 1.1.3 v stringr 1.4.0 ## v readr 2.0.1 v forcats 0.5.1 ## -- Conflicts -------------------------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(RRPP) library(ggpubr) library(ggfortify) library(cluster) library(wesanderson) library(ggExtra) 1.1 Read data and define variables # read data data &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, as.is=TRUE) # define variables maxl &lt;- data$maxl # maximum length maxw &lt;- data$maxw # maximum width maxth &lt;- data$maxth # maximum thickness maxstl &lt;- data$maxstl # maximum stem length maxstw &lt;- data$maxstw # maximum stem width reg &lt;- data$region # region 1.2 Boxplots for variable by raw material # boxplot of maximum length ~ region regionmaxl &lt;- ggplot(data, aes(x = region, y = maxl, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxL&#39;) # boxplot of maximum width ~ region regionmaxw &lt;- ggplot(data, aes(x = region, y = maxw, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxW&#39;) # boxplot of maximum thickness ~ region regionmaxth &lt;- ggplot(data, aes(x = region, y = maxth, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxTh&#39;) # boxplot of stem length ~ region regionmaxstl &lt;- ggplot(data, aes(x = region, y = maxstl, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;StemL&#39;) # boxplot of stem width ~ region regionmaxstw &lt;- ggplot(data, aes(x = region, y = maxstw, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;StemW&#39;) # render figure regionfigure &lt;- ggarrange(regionmaxl, regionmaxw, regionmaxth, regionmaxstl, regionmaxstw, labels = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;), ncol = 2, nrow = 3) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## plot figure regionfigure Figure 1.1: Boxplots for maximum length, width, thickness, stem length, and stem width for Perdiz arrow points recovered from the northern and southern behavioral regions. 1.3 Principal Components Analysis # attributes for plot df&lt;-data[c(4:8)] pch.gps.gp &lt;- c(15,16)[as.factor(reg)] col.gps.gp &lt;- wes_palette(&quot;Moonrise2&quot;)[as.factor(reg)] ## pca plot pca &lt;- autoplot(prcomp(df), data = data, asp = 1, shape = pch.gps.gp, colour = &quot;region&quot;, variance_percentage = TRUE, loadings = TRUE, loadings.colour = &#39;blue&#39;, loadings.label = TRUE, loadings.label.size = 3, frame = TRUE, frame.type = &#39;t&#39;) + scale_fill_manual(values = wes_palette(&quot;Moonrise2&quot;)) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) ggMarginal(pca, groupColour = TRUE) Figure 1.2: Principal components analysis by north/south behavioral region. 1.4 Analyses of Variance (ANOVA) for variable ~ region 1.4.1 Maximum length of Perdiz arrow points # anova = maximum length ~ region regionml &lt;- lm.rrpp(maxl ~ region, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(regionml) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 527.63 527.63 0.27003 24.045 3.5261 1e-04 *** ## Residuals 65 1426.36 21.94 0.72997 ## Total 66 1953.99 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxl ~ region, iter = 9999, SS.type = &quot;I&quot;, data = data, print.progress = FALSE) 1.4.2 Maximum width of Perdiz arrow points # anova = maximum width ~ region regionmw &lt;- lm.rrpp(maxw ~ region, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(regionmw) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 202.15 202.15 0.32669 31.538 3.8965 1e-04 *** ## Residuals 65 416.63 6.41 0.67331 ## Total 66 618.78 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxw ~ region, iter = 9999, SS.type = &quot;I&quot;, data = data, print.progress = FALSE) 1.4.3 Maximum thickness of Perdiz arrow points # anova = maximum thickness ~ region regionmth &lt;- lm.rrpp(maxth ~ region, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(regionmth) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 0.0477 0.047668 0.00274 0.1785 -0.46663 0.678 ## Residuals 65 17.3577 0.267041 0.99726 ## Total 66 17.4054 ## ## Call: lm.rrpp(f1 = maxth ~ region, iter = 9999, SS.type = &quot;I&quot;, data = data, print.progress = FALSE) 1.4.4 Maximum stem length of Perdiz arrow points # anova = maximum stem length ~ region regionmstl &lt;- lm.rrpp(maxstl ~ region, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(regionmstl) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 7.874 7.874 0.08102 5.7305 1.9475 0.018 * ## Residuals 65 89.313 1.374 0.91898 ## Total 66 97.187 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxstl ~ region, iter = 9999, SS.type = &quot;I&quot;, data = data, print.progress = FALSE) 1.4.5 Maximum stem width of Perdiz arrow points # anova = maximum stem width ~ region regionmstw &lt;- lm.rrpp(maxstw ~ region, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(regionmstw) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 12.353 12.3532 0.35368 35.57 4.0646 1e-04 *** ## Residuals 65 22.574 0.3473 0.64632 ## Total 66 34.927 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxstw ~ region, iter = 9999, SS.type = &quot;I&quot;, data = data, print.progress = FALSE) "],["machine-learning-1.html", "Chapter 2 Machine learning", " Chapter 2 Machine learning Details associated with the machine learning analysis can be accessed in the GitHub repository here. "],["geometric-morphometrics---spatial.html", "Chapter 3 Geometric morphometrics - spatial 3.1 Load packages + data 3.2 Generalised Procrustes Analysis 3.3 Boxplot (centroid size) 3.4 Principal Components Analysis 3.5 Procrustes ANOVA: Allometry 3.6 Procrustes ANOVA: Shape and size 3.7 Modularity 3.8 Morphological integration 3.9 Morphological disparity 3.10 Mean shapes", " Chapter 3 Geometric morphometrics - spatial 3.1 Load packages + data # download most recent software version #devtools::install_github(&quot;geomorphR/geomorph&quot;, ref = &quot;Stable&quot;, build_vignettes = TRUE) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) # load analysis packages library(here) library(StereoMorph) library(geomorph) ## Loading required package: rgl ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack library(ggplot2) library(dplyr) library(ggpubr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, row.names = 1) 3.2 Generalised Procrustes Analysis # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize, region = qdata$region) # add centroid size to qdata qdata$csz &lt;- Y.gpa$Csize 3.3 Boxplot (centroid size) # attributes csz &lt;- qdata$csz region &lt;- qdata$region # palette pal = wes_palette(&quot;Moonrise2&quot;) # boxplot of Perdiz arrow points by region ggplot(qdata, aes(x = region, y = csz, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_color_manual(values = pal) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Region&#39;, y = &#39;Centroid Size&#39;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. 3.4 Principal Components Analysis # pca pca &lt;- gm.prcomp(Y.gpa$coords) summary(pca) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 67 ## Number of vectors 58 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 Comp6 Comp7 ## Eigenvalues 0.005773408 0.004263677 0.00110953 0.0002718422 0.0002235284 0.0001238687 9.341316e-05 ## Proportion of Variance 0.475367265 0.351059970 0.09135581 0.0223827748 0.0184047395 0.0101990267 7.691394e-03 ## Cumulative Proportion 0.475367265 0.826427234 0.91778304 0.9401658161 0.9585705557 0.9687695824 9.764610e-01 ## Comp8 Comp9 Comp10 Comp11 Comp12 Comp13 ## Eigenvalues 5.630102e-05 3.794795e-05 3.555976e-05 3.274869e-05 2.100995e-05 1.673629e-05 ## Proportion of Variance 4.635678e-03 3.124534e-03 2.927897e-03 2.696441e-03 1.729904e-03 1.378022e-03 ## Cumulative Proportion 9.810967e-01 9.842212e-01 9.871491e-01 9.898455e-01 9.915754e-01 9.929535e-01 ## Comp14 Comp15 Comp16 Comp17 Comp18 Comp19 ## Eigenvalues 1.558522e-05 0.0000146522 9.479467e-06 8.202708e-06 6.581542e-06 5.623302e-06 ## Proportion of Variance 1.283246e-03 0.0012064237 7.805144e-04 6.753894e-04 5.419068e-04 4.630079e-04 ## Cumulative Proportion 9.942367e-01 0.9954431225 9.962236e-01 9.968990e-01 9.974409e-01 9.979039e-01 ## Comp20 Comp21 Comp22 Comp23 Comp24 Comp25 ## Eigenvalues 4.551824e-06 4.004696e-06 2.780295e-06 2.539899e-06 2.053898e-06 1.684806e-06 ## Proportion of Variance 3.747852e-04 3.297361e-04 2.289221e-04 2.091286e-04 1.691126e-04 1.387225e-04 ## Cumulative Proportion 9.982787e-01 9.986085e-01 9.988374e-01 9.990465e-01 9.992156e-01 9.993543e-01 ## Comp26 Comp27 Comp28 Comp29 Comp30 Comp31 ## Eigenvalues 1.383734e-06 1.008708e-06 9.296041e-07 7.104462e-07 6.995574e-07 5.611282e-07 ## Proportion of Variance 1.139330e-04 8.305433e-05 7.654116e-05 5.849627e-05 5.759972e-05 4.620182e-05 ## Cumulative Proportion 9.994683e-01 9.995513e-01 9.996279e-01 9.996864e-01 9.997440e-01 9.997902e-01 ## Comp32 Comp33 Comp34 Comp35 Comp36 Comp37 ## Eigenvalues 4.574896e-07 3.740460e-07 3.295267e-07 3.023244e-07 2.819142e-07 1.822967e-07 ## Proportion of Variance 3.766849e-05 3.079797e-05 2.713236e-05 2.489260e-05 2.321208e-05 1.500983e-05 ## Cumulative Proportion 9.998278e-01 9.998586e-01 9.998858e-01 9.999107e-01 9.999339e-01 9.999489e-01 ## Comp38 Comp39 Comp40 Comp41 Comp42 Comp43 ## Eigenvalues 1.544787e-07 1.175824e-07 1.003652e-07 8.345271e-08 3.996616e-08 3.159475e-08 ## Proportion of Variance 1.271937e-05 9.681424e-06 8.263810e-06 6.871277e-06 3.290708e-06 2.601429e-06 ## Cumulative Proportion 9.999616e-01 9.999713e-01 9.999796e-01 9.999864e-01 9.999897e-01 9.999923e-01 ## Comp44 Comp45 Comp46 Comp47 Comp48 Comp49 ## Eigenvalues 2.666575e-08 2.255638e-08 1.462538e-08 8.448002e-09 6.927099e-09 3.723904e-09 ## Proportion of Variance 2.195587e-06 1.857233e-06 1.204216e-06 6.955863e-07 5.703591e-07 3.066164e-07 ## Cumulative Proportion 9.999945e-01 9.999964e-01 9.999976e-01 9.999983e-01 9.999988e-01 9.999991e-01 ## Comp50 Comp51 Comp52 Comp53 Comp54 Comp55 ## Eigenvalues 3.152719e-09 2.374219e-09 1.963601e-09 1.208301e-09 6.656422e-10 4.846033e-10 ## Proportion of Variance 2.595866e-07 1.954869e-07 1.616777e-07 9.948832e-08 5.480723e-08 3.990096e-08 ## Cumulative Proportion 9.999994e-01 9.999996e-01 9.999998e-01 9.999999e-01 9.999999e-01 1.000000e+00 ## Comp56 Comp57 Comp58 ## Eigenvalues 2.571792e-10 1.910708e-10 8.289472e-11 ## Proportion of Variance 2.117546e-08 1.573227e-08 6.825333e-09 ## Cumulative Proportion 1.000000e+00 1.000000e+00 1.000000e+00 # set plot parameters pch.gps &lt;- c(15,17)[as.factor(region)] col.gps &lt;- pal[as.factor(region)] col.hull &lt;- c(&quot;#798E87&quot;, &quot;#C27D38&quot;) ## pca plot pc.plot &lt;- plot(pca, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = region, group.cols = col.hull) 3.4.1 Minima/maxima of PC1/2 with warp grids # plot x/y maxima/minima ## x - minima mean.shape &lt;- mshape(Y.gpa$coords) plotRefToTarget(pca$shapes$shapes.comp1$min, mean.shape) ## x - maxima plotRefToTarget(pca$shapes$shapes.comp1$max, mean.shape) ## y - minima plotRefToTarget(pca$shapes$shapes.comp2$min, mean.shape) ## y - maxima plotRefToTarget(pca$shapes$shapes.comp2$max, mean.shape) 3.4.2 Composite PCA with warp grids ## plot composite pca with PC1/2 max/min knitr::include_graphics(&#39;figures/gm-pca.jpg&#39;) 3.5 Procrustes ANOVA: Allometry # allometry fit.size &lt;- procD.lm(shape ~ size, data = gdf, print.progress = FALSE, iter = 9999) # allometry anova(fit.size) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.11834 0.118340 0.14763 11.258 3.7912 1e-04 *** ## Residuals 65 0.68324 0.010511 0.85237 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size, iter = 9999, data = gdf, print.progress = FALSE) # common allometries fit.common&lt;-procD.lm(shape ~ size + region, data = gdf, print.progress = FALSE, iter = 9999) # common allometries anova(fit.common) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.11834 0.118340 0.14763 11.5087 3.8235 1e-04 *** ## region 1 0.02515 0.025155 0.03138 2.4463 1.5172 0.0638 . ## Residuals 64 0.65809 0.010283 0.82099 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size + region, iter = 9999, data = gdf, print.progress = FALSE) # unique allometries fit.unique&lt;-procD.lm(shape ~ size * region, data = gdf, print.progress = FALSE, iter = 9999) # unique allometries anova(fit.unique) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.11834 0.118340 0.14763 11.4003 3.8057 1e-04 *** ## region 1 0.02515 0.025155 0.03138 2.4233 1.5043 0.0652 . ## size:region 1 0.00412 0.004119 0.00514 0.3968 -0.7301 0.7597 ## Residuals 63 0.65397 0.010380 0.81585 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size * region, iter = 9999, data = gdf, print.progress = FALSE) # allometry plots ## regscore (Drake and Klingenberg 2008) plot(fit.size, type = &quot;regression&quot;, reg.type = &quot;RegScore&quot;, predictor = log(gdf$size), pch = pch.gps, col = col.gps) ## common allometric component (Mitteroecker 2004) plotAllometry(fit.size, size = gdf$size, logsz = TRUE, method = &quot;CAC&quot;, pch = pch.gps, col = col.gps) ## size-shape pca (Mitteroecker 2004) plotAllometry(fit.size, size = gdf$size, logsz = TRUE, method = &quot;size.shape&quot;, pch = pch.gps, col = col.gps) ## PredLine (Adams and Nistri 2010) plotAllometry(fit.unique, size = gdf$size, logsz = TRUE, method = &quot;PredLine&quot;, pch = pch.gps, col = col.gps) 3.6 Procrustes ANOVA: Shape and size # shape fit.sh.reg &lt;- procD.lm(shape ~ region, data = gdf, print.progress = FALSE, iter = 9999) # shape anova(fit.sh.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 0.04296 0.042962 0.0536 3.6811 2.077 0.0161 * ## Residuals 65 0.75862 0.011671 0.9464 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ region, iter = 9999, data = gdf, print.progress = FALSE) # size fit.sz.reg &lt;- procD.lm(size ~ region, data = gdf, print.progress = FALSE, iter = 9999) # size anova(fit.sz.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 20.277 20.2766 0.30681 28.769 3.7643 1e-04 *** ## Residuals 65 45.812 0.7048 0.69319 ## Total 66 66.089 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = size ~ region, iter = 9999, data = gdf, print.progress = FALSE) 3.7 Modularity land.gps &lt;- c(&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;A&quot;,&quot;A&quot;) mod &lt;- modularity.test(Y.gpa$coords, partition.gp = land.gps, iter = 9999, seed = NULL, opt.rot = TRUE, print.progress = FALSE) summary(mod) ## ## Call: ## modularity.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, ## seed = NULL, opt.rot = TRUE, print.progress = FALSE) ## ## ## ## CR: 0.94387 ## ## P-value: 6e-04 ## ## Effect Size: -4.7686 ## ## Based on 10000 random permutations ## modularity plot plot(mod) 3.8 Morphological integration it &lt;- integration.test(Y.gpa$coords, partition.gp = land.gps, print.progress = FALSE, iter = 9999) summary(it) ## ## Call: ## integration.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, print.progress = FALSE) ## ## ## ## r-PLS: 0.9676 ## ## Effect Size (Z): 6.23893 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations ## integration plot plot(it) 3.9 Morphological disparity # morphological disparity by shape morphol.disparity(fit.sh.reg, groups = qdata$region, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sh.reg, groups = qdata$region, iter = 9999, data = gdf, print.progress = FALSE) ## ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north south ## 0.008772021 0.012569634 ## ## ## Pairwise absolute differences between variances ## north south ## north 0.000000000 0.003797614 ## south 0.003797614 0.000000000 ## ## ## P-Values ## north south ## north 1.0000 0.1435 ## south 0.1435 1.0000 # morphological disparity by size morphol.disparity(fit.sz.reg, groups = qdata$region, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sz.reg, groups = qdata$region, iter = 9999, data = gdf, print.progress = FALSE) ## ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north south ## 0.3070126 0.8679523 ## ## ## Pairwise absolute differences between variances ## north south ## north 0.0000000 0.5609397 ## south 0.5609397 0.0000000 ## ## ## P-Values ## north south ## north 1.0000 0.0603 ## south 0.0603 1.0000 3.10 Mean shapes # subset landmark coordinates to produce mean shapes new.coords &lt;- coords.subset(A = Y.gpa$coords, group = qdata$region) names(new.coords) ## [1] &quot;north&quot; &quot;south&quot; # group shape means mean &lt;- lapply(new.coords, mshape) ## plot mean shape north plot(mean$north) ## plot mean shape south plot(mean$south) ## comparison plot plotRefToTarget(mean$north, mean$south, method = &quot;points&quot;, mag = 1, useRefPts = TRUE) ## composite figure knitr::include_graphics(&#39;figures/gm-mshape.jpg&#39;) "],["geometric-morphometrics---temporal.html", "Chapter 4 Geometric morphometrics - temporal 4.1 Load packages + data 4.2 Temporal attributes 4.3 Generalised Procrustes Analysis 4.4 Boxplot (centroid size) 4.5 Principal Components Analysis 4.6 Procrustes ANOVA: Shape and size 4.7 Mean shapes", " Chapter 4 Geometric morphometrics - temporal 4.1 Load packages + data # load analysis packages library(here) library(StereoMorph) library(geomorph) library(ggplot2) library(dplyr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes-temporal&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata-temporal.csv&quot;, header = TRUE, row.names = 1) 4.2 Temporal attributes # temporal attributes pal &lt;- wes_palette(&quot;Moonrise2&quot;, 5, type = &quot;continuous&quot;) # gantt chart of relative dates for perdiz arrow points temp&lt;-data.frame(Site = c(&#39;41CP5, Tuck Carpenter&#39;,&#39;41CP12, Johns&#39;,&#39;41CP20, BJ Horton&#39;,&#39;41NA49, Washington Square Mound&#39;, &#39;41SY27, Morse Mound&#39;), Date_Range_CE = c(1430,1430,1500,1238,1456), # in years CE end = c(1500,1600,1550,1445,1488) # in years CE ) # reorder types by beginning of relative date range temp$Site &lt;- factor(temp$Site, levels = temp$Site[order(temp$Date_Range_CE)]) # arrange figure type.time &lt;- ggplot(temp, aes(x = Date_Range_CE, xend = end, y = factor(Site, levels = rev(levels(factor(Site)))), yend = Site, color = Site)) + geom_segment(size = 2.5) + scale_colour_manual(values = pal) + theme(legend.position = &quot;none&quot;) + labs(y = &quot;Site&quot;, x = &quot;Date Range CE&quot;) # render figure type.time 4.3 Generalised Procrustes Analysis # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize, site = qdata$site) # add centroid size to qdata qdata$csz &lt;- Y.gpa$Csize 4.4 Boxplot (centroid size) # attributes csz &lt;- qdata$csz site &lt;- qdata$site # palette pal = wes_palette(&quot;Moonrise2&quot;) # boxplot of Perdiz arrow points by site csz.temp &lt;- ggplot(qdata, aes(x = site, y = csz, color = site)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_color_manual(values = pal) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Site&#39;, y = &#39;Centroid Size&#39;) ## render plot csz.temp ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. 4.5 Principal Components Analysis # pca pca &lt;- gm.prcomp(Y.gpa$coords) summary(pca) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 45 ## Number of vectors 44 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 Comp6 Comp7 ## Eigenvalues 0.006613596 0.004231491 0.001089495 0.0002615032 0.0002062667 0.0001120225 0.0000870906 ## Proportion of Variance 0.514891550 0.329436344 0.084820998 0.0203589340 0.0160585785 0.0087213458 0.0067803069 ## Cumulative Proportion 0.514891550 0.844327894 0.929148891 0.9495078252 0.9655664037 0.9742877495 0.9810680564 ## Comp8 Comp9 Comp10 Comp11 Comp12 Comp13 ## Eigenvalues 4.752568e-05 3.788399e-05 3.355649e-05 0.0000235472 2.119594e-05 1.709099e-05 ## Proportion of Variance 3.700040e-03 2.949401e-03 2.612490e-03 0.0018332317 1.650178e-03 1.330593e-03 ## Cumulative Proportion 9.847681e-01 9.877175e-01 9.903300e-01 0.9921632195 9.938134e-01 9.951440e-01 ## Comp14 Comp15 Comp16 Comp17 Comp18 Comp19 ## Eigenvalues 1.326943e-05 8.093995e-06 7.607390e-06 6.720718e-06 5.582739e-06 4.701020e-06 ## Proportion of Variance 1.033072e-03 6.301457e-04 5.922618e-04 5.232313e-04 4.346357e-04 3.659908e-04 ## Cumulative Proportion 9.961771e-01 9.968072e-01 9.973995e-01 9.979227e-01 9.983573e-01 9.987233e-01 ## Comp20 Comp21 Comp22 Comp23 Comp24 Comp25 ## Eigenvalues 3.205645e-06 2.331217e-06 2.280116e-06 1.468841e-06 1.355222e-06 1.085941e-06 ## Proportion of Variance 2.495706e-04 1.814934e-04 1.775149e-04 1.143544e-04 1.055087e-04 8.454428e-05 ## Cumulative Proportion 9.989729e-01 9.991544e-01 9.993319e-01 9.994463e-01 9.995518e-01 9.996363e-01 ## Comp26 Comp27 Comp28 Comp29 Comp30 Comp31 ## Eigenvalues 9.458067e-07 8.808713e-07 6.055405e-07 5.095181e-07 4.428510e-07 3.356134e-07 ## Proportion of Variance 7.363435e-05 6.857890e-05 4.714344e-05 3.966776e-05 3.447750e-05 2.612867e-05 ## Cumulative Proportion 9.997099e-01 9.997785e-01 9.998257e-01 9.998653e-01 9.998998e-01 9.999259e-01 ## Comp32 Comp33 Comp34 Comp35 Comp36 Comp37 ## Eigenvalues 2.228811e-07 1.768754e-07 1.278682e-07 1.130090e-07 9.761194e-08 8.030144e-08 ## Proportion of Variance 1.735207e-05 1.377037e-05 9.954984e-06 8.798146e-06 7.599430e-06 6.251747e-06 ## Cumulative Proportion 9.999433e-01 9.999571e-01 9.999670e-01 9.999758e-01 9.999834e-01 9.999897e-01 ## Comp38 Comp39 Comp40 Comp41 Comp42 Comp43 ## Eigenvalues 6.547616e-08 3.156706e-08 1.634746e-08 8.465281e-09 5.684154e-09 3.672817e-09 ## Proportion of Variance 5.097547e-06 2.457605e-06 1.272707e-06 6.590517e-07 4.425312e-07 2.859416e-07 ## Cumulative Proportion 9.999948e-01 9.999972e-01 9.999985e-01 9.999992e-01 9.999996e-01 9.999999e-01 ## Comp44 ## Eigenvalues 1.451807e-09 ## Proportion of Variance 1.130282e-07 ## Cumulative Proportion 1.000000e+00 # set plot parameters pch.gps &lt;- c(15,17)[as.factor(site)] col.gps &lt;- pal[as.factor(site)] col.hull &lt;- c(&quot;#798E87&quot;, &quot;#C27D38&quot;) ## pca plot pc.plot &lt;- plot(pca, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = site, group.cols = col.hull) 4.5.1 Minima/maxima of PC1/2 with warp grids # plot x/y maxima/minima ## x - minima mean.shape &lt;- mshape(Y.gpa$coords) plotRefToTarget(pca$shapes$shapes.comp1$min, mean.shape) ## x - maxima plotRefToTarget(pca$shapes$shapes.comp1$max, mean.shape) ## y - minima plotRefToTarget(pca$shapes$shapes.comp2$min, mean.shape) ## y - maxima plotRefToTarget(pca$shapes$shapes.comp2$max, mean.shape) 4.6 Procrustes ANOVA: Shape and size # shape fit.sh.reg &lt;- procD.lm(shape ~ site, data = gdf, print.progress = FALSE, iter = 9999) # shape anova(fit.sh.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## site 1 0.03169 0.031686 0.05607 2.554 1.5148 0.0671 . ## Residuals 43 0.53348 0.012406 0.94393 ## Total 44 0.56516 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ site, iter = 9999, data = gdf, print.progress = FALSE) # size fit.sz.reg &lt;- procD.lm(size ~ site, data = gdf, print.progress = FALSE, iter = 9999) # size anova(fit.sz.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## site 1 5.674 5.6736 0.14526 7.3078 2.1529 0.0086 ** ## Residuals 43 33.384 0.7764 0.85474 ## Total 44 39.058 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = size ~ site, iter = 9999, data = gdf, print.progress = FALSE) 4.7 Mean shapes # subset landmark coordinates to produce mean shapes new.coords &lt;- coords.subset(A = Y.gpa$coords, group = qdata$site) names(new.coords) ## [1] &quot;41na49&quot; &quot;41sy27&quot; # group shape means mean &lt;- lapply(new.coords, mshape) ## plot mean shape 41na49 plot(mean$`41na49`) ## plot mean shape 41sy27 plot(mean$`41sy27`) ## comparison plot plotRefToTarget(mean$`41na49`, mean$`41sy27`, method = &quot;points&quot;, mag = 1, useRefPts = TRUE) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
