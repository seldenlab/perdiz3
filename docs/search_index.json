[["index.html", "Supplementary materials for manuscript: Perdiz arrow points from Caddo burial contexts aid in defining discrete behavioral regions Preface 0.1 Basis of inquiry 0.2 Primary findings 0.3 Acknowledgments 0.4 Funding 0.5 Data management 0.6 Colophon", " Supplementary materials for manuscript: Perdiz arrow points from Caddo burial contexts aid in defining discrete behavioral regions Robert Z. Selden, Jr. and John E. Dockall 2022-11-26 Preface Reproducibility—the ability to recompute results—and replicability—the chances other experimenters will achieve a consistent result—are two foundational characteristics of successful scientific research (Leek and Peng 2015). 0.1 Basis of inquiry Recent research in the ancestral Caddo area has yielded evidence for distinct behavioral regions, across which material culture from Caddo burials—bottles and Gahagan bifaces—was found to express significant morphological differences. This inquiry asks whether Perdiz arrow points from Caddo burials differ across the same geography, extending the pattern of shape differences to a third category of Caddo material culture. Perdiz arrow points collected from the geographies of the northern and southern Caddo behavioral regions were employed to test the hypothesis that morphological attributes differ, and are predictable, between the two communities. Results indicate a significant between-community difference in morphology. Using the same traditional metrics combined with the tools of machine learning, a predictive model—support vector machine—was designed to assess the degree to which community differences could be predicted, achieving a receiver operator curve score of 97 percent, and an accuracy score of 94 percent. The subsequent geometric morphometric analysis identified significant differences in Perdiz arrow point shape and size, coupled with significant results for modularity and morphological integration. These findings bolster recent research that posited two behavioral regions in the ancestral Caddo area defined on the basis of discernible morphological differences across three categories of Caddo material culture. Figure 0.1: Location of Caddo sites with Perdiz arrow points used in this study, and the extent of the ancestral Caddo area (white), Red River basin (blue), Sabine River basin (maroon), and Angelina River basin (brown). 0.2 Primary findings 0.2.1 Linear morphometrics Figure 0.2: Boxplots for a, maximum length; b, maximum width; c, maximum thickness; d, stem length; e, stem width, and f, PCA for linear metrics associated with the Perdiz arrow points. Perdiz arrow point morphology differs significantly by Caddo community 0.2.2 Machine learning Model achieved a cross validation score of 86 percent Model achieved a receiver operator curve score of 97 percent Model achieved an accuracy score of 94 percent 0.2.3 Geometric morphometrics Figure 0.3: Principal components analysis plot (PC1/PC2) for Perdiz arrow points by behavioral region/community (top; gray squares, north; orange triangles, south), and results of modularity (bottom left) and blade/base morphological integration (bottom right) analyses. Perdiz arrow point shape differs significantly by Caddo community Perdiz arrow point size differs significantly by Caddo community Perdiz arrow points exhibit significant modularity Perdiz arrow points exhibit significant blade/base morphological integration Figure 0.4: Mean shapes and comparisons for a, Formative/Early and b, Late/Historic bottles; c, Formative/Early Gahagan bifaces; and d, Middle/Late Perdiz arrow points from Caddo burial contexts in the northern and southern behavioral regions. In the comparisons of mean shape, the northern population appears in gray, and the southern population appears in black. 0.3 Acknowledgments We express our gratitude to the Caddo Nation of Oklahoma and the Anthropology and Archaeology Laboratory at Stephen F. Austin State University for the requisite permissions and access to the NAGPRA items from the Washington Square Mound site and Turner collection, and to Tom A. Middlebrook for brokering access to the Perdiz arrow points from Caddo burials at the Morse Mound site. Thanks also to David K. Thulman, Christian S. Hoggard, Dean C. Adams, Michael L. Collyer, Emma Sherratt, Lauren Butaric, and Kersten Bergstrom for their constructive criticisms, comments, and suggestions throughout the development of this research program, and to the editors and anonymous reviewers for their comments and constructive criticisms, which further improved the manuscript and supplementary materials. 0.4 Funding Components of the analytical workflow were developed and funded by a Preservation Technology and Training grant (P14AP00138) to RZS from the National Center for Preservation Technology and Training, as well as grants to RZS from the Caddo Nation of Oklahoma, National Forests and Grasslands in Texas (15-PA-11081300-033) and the United States Forest Service (20-PA-11081300-074). Additional funding and logistical support was provided by the Heritage Research Center at Stephen F. Austin State University. 0.5 Data management All data and analysis code associated with this project are openly available through the GitHub repository, which is digitally curated on the Open Science Framework (DOI 10.17605/OSF.IO/VZHJR). This volume includes all analysis code employed in the study, providing a means for others to reproduce (exactly) those results discussed and expounded upon in the following chapters. The replicable nature of this undertaking provides a means for others to critically assess and evaluate the various analytical components of this study (Gray and Marwick 2019; Peng 2011; Gandrud 2014), which is a necessary requirement for the production of reliable knowledge. Reproducibility projects in psychology and cancer biology are impacting current research practices across all domains. Examples of reproducible research are becoming more abundant in archaeology (Marwick 2016; Ivanovaitė et al. 2020; Selden Jr., Dockall, and Dubied 2020; Selden Jr. et al. 2021; Selden 2022), and the next generation of archaeologists are learning those tools and methods needed to reproduce and/or replicate research results (Marwick et al. 2019). Reproducible and replicable research work flows are often employed at the highest levels of humanities-based inquiries to mitigate concern or doubt regarding proper execution, and is of particular import should the results have—explicitly or implicitly—a major impact on scientific progress (Peels and Bouter 2018). 0.6 Colophon This version of the analysis was generated on 2022-11-26 07:32:43 using the following computational environment and dependencies: # what R packages and versions were used? if (&quot;devtools&quot; %in% installed.packages()) devtools::session_info() ## ─ Session info ────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.2.2 (2022-10-31 ucrt) ## os Windows 10 x64 (build 19045) ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate English_United States.utf8 ## ctype English_United States.utf8 ## tz America/Chicago ## date 2022-11-26 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ C:/Program Files/RStudio/bin/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.2.2) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.2.0) ## bookdown 0.30 2022-11-09 [1] CRAN (R 4.2.2) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.2.2) ## bslib 0.4.1 2022-11-02 [1] CRAN (R 4.2.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.2.2) ## callr 3.7.3 2022-11-02 [1] CRAN (R 4.2.2) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.2.2) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.2.2) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.2.2) ## crayon 1.5.2 2022-09-29 [1] CRAN (R 4.2.2) ## DBI 1.1.3 2022-06-18 [1] CRAN (R 4.2.2) ## dbplyr 2.2.1 2022-06-27 [1] CRAN (R 4.2.2) ## devtools 2.4.5 2022-10-11 [1] CRAN (R 4.2.2) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.2.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.2.2) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.2.2) ## evaluate 0.18 2022-11-07 [1] CRAN (R 4.2.2) ## fansi 1.0.3 2022-03-24 [1] CRAN (R 4.2.2) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.2.2) ## forcats * 0.5.2 2022-08-19 [1] CRAN (R 4.2.2) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.2.2) ## gargle 1.2.1 2022-09-08 [1] CRAN (R 4.2.2) ## generics 0.1.3 2022-07-05 [1] CRAN (R 4.2.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.2.2) ## git2r 0.30.1 2022-03-16 [1] CRAN (R 4.2.2) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.2.2) ## googledrive 2.0.0 2021-07-08 [1] CRAN (R 4.2.2) ## googlesheets4 1.0.1 2022-08-13 [1] CRAN (R 4.2.2) ## gtable 0.3.1 2022-09-01 [1] CRAN (R 4.2.2) ## haven 2.5.1 2022-08-22 [1] CRAN (R 4.2.2) ## here 1.0.1 2020-12-13 [1] CRAN (R 4.2.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.2.2) ## hms 1.1.2 2022-08-19 [1] CRAN (R 4.2.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.2.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.2.2) ## httpuv 1.6.6 2022-09-08 [1] CRAN (R 4.2.2) ## httr 1.4.4 2022-08-17 [1] CRAN (R 4.2.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.2.2) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.2.2) ## knitr 1.41 2022-11-18 [1] CRAN (R 4.2.2) ## later 1.3.0 2021-08-18 [1] CRAN (R 4.2.2) ## lattice 0.20-45 2021-09-22 [2] CRAN (R 4.2.2) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.2.2) ## lubridate 1.9.0 2022-11-06 [1] CRAN (R 4.2.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.2.2) ## Matrix 1.5-1 2022-09-13 [2] CRAN (R 4.2.2) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.2.2) ## mime 0.12 2021-09-28 [1] CRAN (R 4.2.0) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.2.2) ## modelr 0.1.10 2022-11-11 [1] CRAN (R 4.2.2) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.2.2) ## pillar 1.8.1 2022-08-19 [1] CRAN (R 4.2.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.2.2) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.2.2) ## pkgload 1.3.2 2022-11-16 [1] CRAN (R 4.2.2) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.2.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.2.2) ## processx 3.8.0 2022-10-26 [1] CRAN (R 4.2.2) ## profvis 0.3.7 2020-11-02 [1] CRAN (R 4.2.2) ## promises 1.2.0.1 2021-02-11 [1] CRAN (R 4.2.2) ## ps 1.7.2 2022-10-26 [1] CRAN (R 4.2.2) ## purrr * 0.3.5 2022-10-06 [1] CRAN (R 4.2.2) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.2.2) ## rappdirs 0.3.3 2021-01-31 [1] CRAN (R 4.2.2) ## Rcpp 1.0.9 2022-07-08 [1] CRAN (R 4.2.1) ## readr * 2.1.3 2022-10-01 [1] CRAN (R 4.2.2) ## readxl 1.4.1 2022-08-17 [1] CRAN (R 4.2.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.2.2) ## reprex 2.0.2 2022-08-17 [1] CRAN (R 4.2.2) ## reticulate * 1.26 2022-08-31 [1] CRAN (R 4.2.2) ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.2.2) ## rmarkdown 2.18 2022-11-09 [1] CRAN (R 4.2.2) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.2.2) ## rsconnect 0.8.28 2022-10-24 [1] CRAN (R 4.2.2) ## rstudioapi 0.14 2022-08-22 [1] CRAN (R 4.2.2) ## rvest 1.0.3 2022-08-19 [1] CRAN (R 4.2.2) ## sass 0.4.4 2022-11-24 [1] CRAN (R 4.2.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.2.2) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.2.2) ## shiny 1.7.3 2022-10-25 [1] CRAN (R 4.2.2) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.2.1) ## stringr * 1.4.1 2022-08-20 [1] CRAN (R 4.2.2) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.2.2) ## tidyr * 1.2.1 2022-09-08 [1] CRAN (R 4.2.2) ## tidyselect 1.2.0 2022-10-10 [1] CRAN (R 4.2.2) ## tidyverse * 1.3.2 2022-07-18 [1] CRAN (R 4.2.2) ## timechange 0.1.1 2022-11-04 [1] CRAN (R 4.2.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.2.2) ## urlchecker 1.0.1 2021-11-30 [1] CRAN (R 4.2.2) ## usethis 2.1.6 2022-05-25 [1] CRAN (R 4.2.2) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.2.2) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.2.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.2.2) ## xfun 0.35 2022-11-16 [1] CRAN (R 4.2.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.2.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.2.2) ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.2.1) ## ## [1] C:/Users/seldenjrz/AppData/Local/R/win-library/4.2 ## [2] C:/Program Files/R/R-4.2.2/library ## ## ─ Python configuration ────────────────────────────────────────────────────────────────────────────────── ## python: C:/Users/seldenjrz/Anaconda3/python.exe ## libpython: C:/Users/seldenjrz/Anaconda3/python39.dll ## pythonhome: C:/Users/seldenjrz/Anaconda3 ## version: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)] ## Architecture: 64bit ## numpy: C:/Users/seldenjrz/Anaconda3/Lib/site-packages/numpy ## numpy_version: 1.21.5 ## ## NOTE: Python version was forced by use_python function ## ## ───────────────────────────────────────────────────────────────────────────────────────────────────────── Current Git commit details are: # where can I find this commit? if (&quot;git2r&quot; %in% installed.packages() &amp; git2r::in_repository(path = &quot;.&quot;)) git2r::repository(here::here()) ## Local: main D:/github/perdiz3 ## Remote: main @ origin (https://github.com/seldenlab/perdiz3) ## Head: [292a61b] 2022-11-26: &lt;edit ms&gt; References "],["linear-morphometrics-1.html", "Chapter 1 Linear morphometrics 1.1 Read data and define variables 1.2 Boxplots for variable by region 1.3 Principal Components Analysis 1.4 Permutational MANOVA", " Chapter 1 Linear morphometrics # install required analysis packages #devtools::install_github(&quot;tidyverse/tidyverse&quot;) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) #devtools::install_github(&quot;kassambara/ggpubr&quot;) #devtools::install_github(&quot;sinhrks/ggfortify&quot;) #devtools::install_github(&quot;daattali/ggExtra&quot;) # load libraries library(here) ## here() starts at D:/github/perdiz3/supp library(tidyverse) library(vegan) ## Loading required package: permute ## Loading required package: lattice ## This is vegan 2.6-4 library(ggpubr) library(ggfortify) library(cluster) library(wesanderson) library(ggExtra) 1.1 Read data and define variables # read data data &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, as.is=TRUE) # define variables maxl &lt;- data$maxl # maximum length maxw &lt;- data$maxw # maximum width maxth &lt;- data$maxth # maximum thickness maxstl &lt;- data$maxstl # maximum stem length maxstw &lt;- data$maxstw # maximum stem width reg &lt;- data$region # region 1.2 Boxplots for variable by region # boxplot of maximum length ~ region regionmaxl &lt;- ggplot(data, aes(x = region, y = maxl, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxL&#39;) # boxplot of maximum width ~ region regionmaxw &lt;- ggplot(data, aes(x = region, y = maxw, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxW&#39;) # boxplot of maximum thickness ~ region regionmaxth &lt;- ggplot(data, aes(x = region, y = maxth, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;MaxTh&#39;) # boxplot of stem length ~ region regionmaxstl &lt;- ggplot(data, aes(x = region, y = maxstl, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;StemL&#39;) # boxplot of stem width ~ region regionmaxstw &lt;- ggplot(data, aes(x = region, y = maxstw, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Community&#39;, y = &#39;StemW&#39;) # render figure regionfigure &lt;- ggarrange(regionmaxl, regionmaxw, regionmaxth, regionmaxstl, regionmaxstw, labels = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;), ncol = 2, nrow = 3) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. ## plot figure regionfigure Figure 1.1: Boxplots for maximum length, width, thickness, stem length, and stem width for Perdiz arrow points recovered from the northern and southern behavioral regions. 1.3 Principal Components Analysis # attributes for plot df&lt;-data[c(4:8)] pch.gps.gp &lt;- c(15,16)[as.factor(reg)] ## pca plot pca &lt;- autoplot(prcomp(df), data = data, asp = 1, scale. = TRUE, shape = pch.gps.gp, colour = &quot;region&quot;, variance_percentage = TRUE, loadings = TRUE, loadings.colour = &#39;blue&#39;, loadings.label = TRUE, loadings.label.size = 3, frame = TRUE, frame.type = &#39;t&#39;) + scale_fill_manual(values = wes_palette(&quot;Moonrise2&quot;)) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) ggMarginal(pca, groupColour = TRUE) Figure 1.2: Principal components analysis by north/south behavioral region. 1.4 Permutational MANOVA # perMANOVA perdiz.matrix &lt;- as.matrix(data[,4:8]) perdiz.mat &lt;- sqrt(perdiz.matrix) perdiz.dist &lt;- vegdist(perdiz.mat, method = &#39;bray&#39;) set.seed(36) perdiz.ns &lt;- adonis2(perdiz.dist~region, data = data, permutations = 9999, method = &#39;bray&#39;) perdiz.ns ## Permutation test for adonis under reduced model ## Terms added sequentially (first to last) ## Permutation: free ## Number of permutations: 9999 ## ## adonis2(formula = perdiz.dist ~ region, data = data, permutations = 9999, method = &quot;bray&quot;) ## Df SumOfSqs R2 F Pr(&gt;F) ## region 1 0.036243 0.29485 27.179 1e-04 *** ## Residual 65 0.086678 0.70515 ## Total 66 0.122921 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 "],["machine-learning-1.html", "Chapter 2 Machine learning 2.1 Install analysis packages 2.2 Select features and responses 2.3 Ensure features and responses are numeric 2.4 Split data for train/test 2.5 Decrease sensitivity of algorithm to outliers through standardising features 2.6 Create SVM classifier with linear kernel 2.7 Make predictions + evaluate accuracy", " Chapter 2 Machine learning 2.1 Install analysis packages library(tidyverse) library(reticulate) # run the following in terminal #conda create -n py3.8 python=3.9 scikit-learn-intelex pandas numpy matplotlib use_python(&quot;C:/Users/seldenjrz/Anaconda3/python.exe&quot;, required = TRUE) # load analysis packages import pandas as pd import matplotlib import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.model_selection import cross_val_score from sklearn import svm from sklearn.svm import SVC from sklearn.model_selection import GridSearchCV from sklearn.pipeline import Pipeline from sklearn.metrics import roc_auc_score, accuracy_score from sklearn import metrics # read data data = pd.read_csv(&#39;perdizsite.csv&#39;) data.head() ## spec site region maxl maxw maxth maxstl maxstw ## 0 554 41cp12 north 25.40 12.18 3.82 5.75 3.84 ## 1 555 41cp12 north 22.92 12.87 3.54 3.71 3.69 ## 2 556 41cp12 north 24.09 11.87 3.61 5.15 4.78 ## 3 559 41cp12 north 25.01 10.57 3.50 5.84 3.88 ## 4 562 41cp12 north 22.10 10.45 3.47 3.77 3.43 2.2 Select features and responses # attributes for analysis feature_cols = [&#39;maxl&#39;, &#39;maxw&#39;, &#39;maxth&#39;, &#39;maxstl&#39;, &#39;maxstw&#39;] X = data[feature_cols] # cast from string to int reg_num = {&#39;north&#39;:0, &#39;south&#39;:1} data[&#39;reg_num&#39;] = data.region.map(reg_num) data.head() ## spec site region maxl maxw maxth maxstl maxstw reg_num ## 0 554 41cp12 north 25.40 12.18 3.82 5.75 3.84 0 ## 1 555 41cp12 north 22.92 12.87 3.54 3.71 3.69 0 ## 2 556 41cp12 north 24.09 11.87 3.61 5.15 4.78 0 ## 3 559 41cp12 north 25.01 10.57 3.50 5.84 3.88 0 ## 4 562 41cp12 north 22.10 10.45 3.47 3.77 3.43 0 y = data.reg_num 2.3 Ensure features and responses are numeric # X vals X.dtypes # y vals ## maxl float64 ## maxw float64 ## maxth float64 ## maxstl float64 ## maxstw float64 ## dtype: object y.dtypes ## dtype(&#39;int64&#39;) 2.4 Split data for train/test # split data into train/test sets (75/25 split) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) print(&#39;X_train: &#39;, X_train.shape) ## X_train: (50, 5) print(&#39;X_test: &#39;, X_test.shape) ## X_test: (17, 5) print(&#39;y_train:&#39;, y_train.shape) ## y_train: (50,) print(&#39;y_test: &#39;, y_test.shape) ## y_test: (17,) 2.5 Decrease sensitivity of algorithm to outliers through standardising features stdsc = StandardScaler() X_train_std = stdsc.fit_transform(X_train) X_test_std = stdsc.transform(X_test) 2.6 Create SVM classifier with linear kernel clf = svm.SVC(kernel = &#39;linear&#39;) clf.fit(X_train_std, y_train) ## SVC(kernel=&#39;linear&#39;) #Grid search and nested cross validation of training dataset # grid search pipe_svc = Pipeline([(&#39;scl&#39;, StandardScaler()), (&#39;clf&#39;, SVC(random_state = 0))]) param_range = [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0] param_grid = [{&#39;clf__C&#39;: param_range, &#39;clf__kernel&#39;: [&#39;linear&#39;]}, {&#39;clf__C&#39;: param_range, &#39;clf__gamma&#39;: param_range, &#39;clf__kernel&#39;: [&#39;rbf&#39;]}] gs = GridSearchCV(estimator = pipe_svc, param_grid = param_grid, scoring = &#39;accuracy&#39;, cv = 10, n_jobs = 1) gs = gs.fit(X_train_std, y_train) print(&#39;Grid Search Best Score: &#39;, gs.best_score_) ## Grid Search Best Score: 0.8600000000000001 print(&#39;Grid Search Best Parameters: &#39;, gs.best_params_) # use the test dataset to estimate model performance ## Grid Search Best Parameters: {&#39;clf__C&#39;: 10.0, &#39;clf__kernel&#39;: &#39;linear&#39;} clf = gs.best_estimator_ clf.fit(X_train_std, y_train) ## Pipeline(steps=[(&#39;scl&#39;, StandardScaler()), ## (&#39;clf&#39;, SVC(C=10.0, kernel=&#39;linear&#39;, random_state=0))]) clf.score(X_test_std, y_test) # nested cross validation ## 0.9411764705882353 gs = GridSearchCV(estimator = pipe_svc, param_grid = param_grid, scoring = &#39;accuracy&#39;, cv = 10, n_jobs = 1) scores = cross_val_score(gs, X_train_std, y_train, scoring = &#39;accuracy&#39;, cv = 10) print(&#39;Cross Validation Scores: &#39;, scores) ## Cross Validation Scores: [0.8 1. 0.4 1. 0.8 0.8 1. 1. 0.8 1. ] print(&#39;Cross Validation Mean Score: &#39;, scores.mean()) ## Cross Validation Mean Score: 0.8600000000000001 2.7 Make predictions + evaluate accuracy y_pred = clf.predict(X_test_std) print(&#39;Receiver Operator Curve Score: &#39;, roc_auc_score(y_true = y_test, y_score = y_pred)) ## Receiver Operator Curve Score: 0.96875 print(&#39;Accuracy Score: &#39;, accuracy_score(y_test, y_pred)) ## Accuracy Score: 0.9411764705882353 print(&#39;Precision: &#39;, metrics.precision_score(y_test, y_pred)) ## Precision: 1.0 print(&#39;Recall: &#39;, metrics.recall_score(y_test, y_pred)) ## Recall: 0.9375 # plot ROC curve fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred) plt.plot(fpr, tpr) plt.xlim([0.0, 1.0]) ## (0.0, 1.0) plt.ylim([0.0, 1.0]) ## (0.0, 1.0) plt.title(&#39;ROC curve for Perdiz classifier&#39;) plt.xlabel(&#39;False Positive Rate (1 - Specificity)&#39;) plt.ylabel(&#39;True Positive Rate (Sensitivity)&#39;) plt.grid(True) "],["geometric-morphometrics---spatial.html", "Chapter 3 Geometric morphometrics - spatial 3.1 Load packages + data 3.2 Generalised Procrustes Analysis 3.3 Boxplot (centroid size) 3.4 Principal Components Analysis 3.5 Procrustes ANOVA: Shape and size 3.6 Modularity 3.7 Morphological integration 3.8 Morphological disparity 3.9 Mean shapes", " Chapter 3 Geometric morphometrics - spatial 3.1 Load packages + data # download most recent software version #devtools::install_github(&quot;geomorphR/geomorph&quot;, ref = &quot;Stable&quot;, build_vignettes = TRUE) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) # load analysis packages library(here) library(StereoMorph) library(geomorph) ## Loading required package: RRPP ## Loading required package: rgl ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack library(ggplot2) library(dplyr) library(ggpubr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, row.names = 1) 3.2 Generalised Procrustes Analysis # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) ## plot plot(Y.gpa) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize, region = qdata$region) # add centroid size to qdata qdata$csz &lt;- Y.gpa$Csize 3.3 Boxplot (centroid size) # attributes csz &lt;- qdata$csz region &lt;- qdata$region # palette pal = wes_palette(&quot;Moonrise2&quot;) # boxplot of Perdiz arrow points by region ggplot(qdata, aes(x = region, y = csz, color = region)) + geom_boxplot(notch = TRUE) + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_color_manual(values = pal) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Region&#39;, y = &#39;Centroid Size&#39;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. 3.4 Principal Components Analysis # pca pca &lt;- gm.prcomp(Y.gpa$coords) summary(pca) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 67 ## Number of vectors 58 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 Comp6 ## Eigenvalues 0.005773408 0.004263677 0.00110953 0.0002718422 0.0002235284 0.0001238687 ## Proportion of Variance 0.475367265 0.351059970 0.09135581 0.0223827748 0.0184047395 0.0101990267 ## Cumulative Proportion 0.475367265 0.826427234 0.91778304 0.9401658161 0.9585705557 0.9687695824 ## Comp7 Comp8 Comp9 Comp10 Comp11 Comp12 ## Eigenvalues 9.341316e-05 5.630102e-05 3.794795e-05 3.555976e-05 3.274869e-05 2.100995e-05 ## Proportion of Variance 7.691394e-03 4.635678e-03 3.124534e-03 2.927897e-03 2.696441e-03 1.729904e-03 ## Cumulative Proportion 9.764610e-01 9.810967e-01 9.842212e-01 9.871491e-01 9.898455e-01 9.915754e-01 ## Comp13 Comp14 Comp15 Comp16 Comp17 Comp18 ## Eigenvalues 1.673629e-05 1.558522e-05 0.0000146522 9.479467e-06 8.202708e-06 6.581542e-06 ## Proportion of Variance 1.378022e-03 1.283246e-03 0.0012064237 7.805144e-04 6.753894e-04 5.419068e-04 ## Cumulative Proportion 9.929535e-01 9.942367e-01 0.9954431225 9.962236e-01 9.968990e-01 9.974409e-01 ## Comp19 Comp20 Comp21 Comp22 Comp23 Comp24 ## Eigenvalues 5.623302e-06 4.551824e-06 4.004696e-06 2.780295e-06 2.539899e-06 2.053898e-06 ## Proportion of Variance 4.630079e-04 3.747852e-04 3.297361e-04 2.289221e-04 2.091286e-04 1.691126e-04 ## Cumulative Proportion 9.979039e-01 9.982787e-01 9.986085e-01 9.988374e-01 9.990465e-01 9.992156e-01 ## Comp25 Comp26 Comp27 Comp28 Comp29 Comp30 ## Eigenvalues 1.684806e-06 1.383734e-06 1.008708e-06 9.296041e-07 7.104462e-07 6.995574e-07 ## Proportion of Variance 1.387225e-04 1.139330e-04 8.305433e-05 7.654116e-05 5.849627e-05 5.759972e-05 ## Cumulative Proportion 9.993543e-01 9.994683e-01 9.995513e-01 9.996279e-01 9.996864e-01 9.997440e-01 ## Comp31 Comp32 Comp33 Comp34 Comp35 Comp36 ## Eigenvalues 5.611282e-07 4.574896e-07 3.740460e-07 3.295267e-07 3.023244e-07 2.819142e-07 ## Proportion of Variance 4.620182e-05 3.766849e-05 3.079797e-05 2.713236e-05 2.489260e-05 2.321208e-05 ## Cumulative Proportion 9.997902e-01 9.998278e-01 9.998586e-01 9.998858e-01 9.999107e-01 9.999339e-01 ## Comp37 Comp38 Comp39 Comp40 Comp41 Comp42 ## Eigenvalues 1.822967e-07 1.544787e-07 1.175824e-07 1.003652e-07 8.345271e-08 3.996616e-08 ## Proportion of Variance 1.500983e-05 1.271937e-05 9.681424e-06 8.263810e-06 6.871277e-06 3.290708e-06 ## Cumulative Proportion 9.999489e-01 9.999616e-01 9.999713e-01 9.999796e-01 9.999864e-01 9.999897e-01 ## Comp43 Comp44 Comp45 Comp46 Comp47 Comp48 ## Eigenvalues 3.159475e-08 2.666575e-08 2.255638e-08 1.462538e-08 8.448002e-09 6.927099e-09 ## Proportion of Variance 2.601429e-06 2.195587e-06 1.857233e-06 1.204216e-06 6.955863e-07 5.703591e-07 ## Cumulative Proportion 9.999923e-01 9.999945e-01 9.999964e-01 9.999976e-01 9.999983e-01 9.999988e-01 ## Comp49 Comp50 Comp51 Comp52 Comp53 Comp54 ## Eigenvalues 3.723904e-09 3.152719e-09 2.374219e-09 1.963601e-09 1.208301e-09 6.656422e-10 ## Proportion of Variance 3.066164e-07 2.595866e-07 1.954869e-07 1.616777e-07 9.948832e-08 5.480723e-08 ## Cumulative Proportion 9.999991e-01 9.999994e-01 9.999996e-01 9.999998e-01 9.999999e-01 9.999999e-01 ## Comp55 Comp56 Comp57 Comp58 ## Eigenvalues 4.846033e-10 2.571792e-10 1.910708e-10 8.289472e-11 ## Proportion of Variance 3.990096e-08 2.117546e-08 1.573227e-08 6.825333e-09 ## Cumulative Proportion 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 # set plot parameters pch.gps &lt;- c(15,17)[as.factor(region)] col.gps &lt;- pal[as.factor(region)] col.hull &lt;- c(&quot;#798E87&quot;, &quot;#C27D38&quot;) ## pca plot pc.plot &lt;- plot(pca, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = region, group.cols = col.hull) 3.4.1 Minima/maxima of PC1/2 with warp grids # plot x/y maxima/minima ## x - minima mean.shape &lt;- mshape(Y.gpa$coords) plotRefToTarget(pca$shapes$shapes.comp1$min, mean.shape) ## x - maxima plotRefToTarget(pca$shapes$shapes.comp1$max, mean.shape) ## y - minima plotRefToTarget(pca$shapes$shapes.comp2$min, mean.shape) ## y - maxima plotRefToTarget(pca$shapes$shapes.comp2$max, mean.shape) 3.4.2 Composite PCA with warp grids ## plot composite pca with PC1/2 max/min knitr::include_graphics(&#39;figures/gm-pca.jpg&#39;) 3.5 Procrustes ANOVA: Shape and size # shape fit.sh.reg &lt;- procD.lm(shape ~ region, data = gdf, print.progress = FALSE, iter = 9999) # shape anova(fit.sh.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 0.04296 0.042962 0.0536 3.6811 2.077 0.0161 * ## Residuals 65 0.75862 0.011671 0.9464 ## Total 66 0.80158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ region, iter = 9999, data = gdf, print.progress = FALSE) # size fit.sz.reg &lt;- procD.lm(size ~ region, data = gdf, print.progress = FALSE, iter = 9999) # size anova(fit.sz.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## region 1 20.277 20.2766 0.30681 28.769 3.7643 1e-04 *** ## Residuals 65 45.812 0.7048 0.69319 ## Total 66 66.089 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = size ~ region, iter = 9999, data = gdf, print.progress = FALSE) 3.6 Modularity land.gps &lt;- c(&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;A&quot;,&quot;A&quot;) mod &lt;- modularity.test(Y.gpa$coords, partition.gp = land.gps, iter = 9999, seed = NULL, opt.rot = TRUE, print.progress = FALSE) summary(mod) ## ## Call: ## modularity.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, ## seed = NULL, opt.rot = TRUE, print.progress = FALSE) ## ## ## ## CR: 0.94387 ## ## P-value: 6e-04 ## ## Effect Size: -4.7686 ## ## Based on 10000 random permutations ## modularity plot plot(mod) 3.7 Morphological integration it &lt;- integration.test(Y.gpa$coords, partition.gp = land.gps, print.progress = FALSE, iter = 9999) summary(it) ## ## Call: ## integration.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, print.progress = FALSE) ## ## ## ## r-PLS: 0.9676 ## ## Effect Size (Z): 6.23893 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations ## integration plot plot(it) 3.8 Morphological disparity # morphological disparity by shape morphol.disparity(fit.sh.reg, groups = qdata$region, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sh.reg, groups = qdata$region, iter = 9999, ## data = gdf, print.progress = FALSE) ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north south ## 0.008772021 0.012569634 ## ## ## Pairwise absolute differences between variances ## north south ## north 0.000000000 0.003797614 ## south 0.003797614 0.000000000 ## ## ## P-Values ## north south ## north 1.0000 0.1435 ## south 0.1435 1.0000 # morphological disparity by size morphol.disparity(fit.sz.reg, groups = qdata$region, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = fit.sz.reg, groups = qdata$region, iter = 9999, ## data = gdf, print.progress = FALSE) ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## north south ## 0.3070126 0.8679523 ## ## ## Pairwise absolute differences between variances ## north south ## north 0.0000000 0.5609397 ## south 0.5609397 0.0000000 ## ## ## P-Values ## north south ## north 1.0000 0.0603 ## south 0.0603 1.0000 3.9 Mean shapes # subset landmark coordinates to produce mean shapes new.coords &lt;- coords.subset(A = Y.gpa$coords, group = qdata$region) names(new.coords) ## [1] &quot;north&quot; &quot;south&quot; # group shape means mean &lt;- lapply(new.coords, mshape) ## plot mean shape north plot(mean$north) ## plot mean shape south plot(mean$south) ## comparison plot plotRefToTarget(mean$north, mean$south, method = &quot;points&quot;, mag = 1, useRefPts = TRUE) ## composite figure knitr::include_graphics(&#39;figures/gm-mshape.jpg&#39;) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
